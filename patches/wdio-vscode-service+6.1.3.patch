diff --git a/node_modules/wdio-vscode-service/dist/launcher.js b/node_modules/wdio-vscode-service/dist/launcher.js
index 9bf9936..7e6cfaa 100644
--- a/node_modules/wdio-vscode-service/dist/launcher.js
+++ b/node_modules/wdio-vscode-service/dist/launcher.js
@@ -102,10 +102,12 @@ export default class VSCodeServiceLauncher {
         if (!cap[VSCODE_CAPABILITY_KEY]) {
             throw new Error(`No key "${VSCODE_CAPABILITY_KEY}" found in caps`);
         }
+        let vscodeVersion;
+        let chromedriverVersion;
         if (versionsFileExist) {
             const content = JSON.parse((await fs.readFile(versionsFilePath, 'utf-8')).toString());
-            const vscodeVersion = content[version]?.vscode;
-            const chromedriverVersion = content[version]?.chromedriver;
+             vscodeVersion = content[version]?.vscode;
+             chromedriverVersion = content[version]?.chromedriver;
             const vscodePath = cap[VSCODE_CAPABILITY_KEY]?.binary
                 || path.join(this._cachePath, `vscode-${process.platform}-${process.arch}-${vscodeVersion}`);
             if (vscodeVersion && chromedriverVersion && await fileExist(vscodePath)) {
@@ -115,8 +117,12 @@ export default class VSCodeServiceLauncher {
                 return;
             }
         }
-        const vscodeVersion = await this._fetchVSCodeVersion(version);
-        const chromedriverVersion = await this._fetchChromedriverVersion(vscodeVersion);
+        if (!vscodeVersion) {
+            vscodeVersion = await this._fetchVSCodeVersion(version);
+        }
+        if (!chromedriverVersion){
+            chromedriverVersion = await this._fetchChromedriverVersion(vscodeVersion);
+        }
         cap.browserVersion = chromedriverVersion;
         cap[VSCODE_CAPABILITY_KEY].binary ||= await this._downloadVSCode(vscodeVersion);
         await this._updateVersionsTxt(version, vscodeVersion, chromedriverVersion, versionsFileExist);
